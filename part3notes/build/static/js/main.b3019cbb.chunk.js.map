{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNote","console","log","length","url","find","n","changedNote","map","returnedNote","catch","error","setTimeout","filter","notesToShow","key","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b3019cbb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({ note, toggleImportance }) => {\r\n  const label = note.important\r\n    ? 'make not important' : 'make important'\r\n  return (\r\n    <li className='note'>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>  \r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n\r\n// const baseUrl = '/notes'\r\n// api backend \r\n// cause app to pull for data from express backend\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\n// const getAll = () => {\r\n//     const request = axios.get(baseUrl)\r\n//     const nonExisting = {\r\n//       id: 10000,\r\n//       content: 'This note is not saved to server',\r\n//       date: '2019-05-30T17:30:31.098Z',\r\n//       important: true,\r\n//     }\r\n//     return request.then(response => response.data.concat(nonExisting))\r\n//   }\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }\r\n","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    if(message === null){\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport axios from 'axios'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: 'green',\r\n    fontStyle: 'italic',\r\n    fontSize: 16\r\n  }\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n    </div> \r\n  )\r\n}\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('a new note...')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\r\n\r\n  const hook = () => {\r\n    // console.log('effect')\r\n    // axios\r\n    //   .get('http://localhost:3001/notes')\r\n    //   .then(response => {\r\n    //     console.log('promise fulfilled')\r\n    //     setNotes(response.data)\r\n    //   })\r\n\r\n    noteService\r\n    .getAll()\r\n    .then(initialNote => {\r\n      setNotes(initialNote)\r\n    })\r\n  }\r\n  //effects only run after completed render\r\n  //empty array means effect only run along first render\r\n  useEffect(hook, [])\r\n\r\n  console.log('render', notes.length, 'notes')\r\n\r\n  const toggleImportance = id => {\r\n    const url = `http://localhost:3001/notes/${id}`\r\n    const note = notes.find(n => n.id === id)\r\n    const changedNote = { ...note, important: !note.important}\r\n  \r\n    axios.put(url, changedNote).then(response => {\r\n      setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n    })\r\n    noteService\r\n      .update(id, changedNote)\r\n      // .then(response => {\r\n      //   setNotes(notes.map(note => note.id !== id ? note : response.data))\r\n      .then(returnedNote => {\r\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter(n => n.id !== id))\r\n      })\r\n  }\r\n\r\n  const notesToShow = showAll\r\n  //if showAll is true then notes else notes.filter\r\n    ? notes\r\n    : notes.filter(note => note.important)\r\n\r\n  const rows = () => notesToShow.map(note =>\r\n    <Note\r\n      key={note.id}\r\n      note={note}\r\n      toggleImportance={() => toggleImportance(note.id)}\r\n    />\r\n  )\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault()\r\n    console.log('button clicked', event.target)\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString,\r\n      important: Math.random() > 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n\r\n    noteService\r\n      .create(noteObject)\r\n      .then(returnedNote => {\r\n        setNotes(notes.concat(returnedNote))\r\n        setNewNote('')\r\n      })\r\n    \r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    console.log(event.target.value)\r\n    setNewNote(event.target.value)\r\n  }\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      <Notification message={errorMessage}/>\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? 'important' : 'all'}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {rows()}\r\n      </ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange}/>\r\n        <button type=\"submit\">save</button>\r\n      </form> \r\n      <Footer/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// import React from 'react'\r\n// import ReactDOM from 'react-dom'\r\n// import Course from './components/Course'\r\n\r\n// const App = () => {\r\n//     const courses = [\r\n//         {\r\n//           name: 'Half Stack application development',\r\n//           id: 1,\r\n//           parts: [\r\n//             {\r\n//               name: 'Fundamentals of React',\r\n//               exercises: 10,\r\n//               id: 1\r\n//             },\r\n//             {\r\n//               name: 'Using props to pass data',\r\n//               exercises: 7,\r\n//               id: 2\r\n//             },\r\n//             {\r\n//               name: 'State of a component',\r\n//               exercises: 14,\r\n//               id: 3\r\n//             },\r\n//             {\r\n//               name: 'Redux',\r\n//               exercises: 11,\r\n//               id: 4\r\n//             }\r\n//           ]\r\n//         }, \r\n//         {\r\n//           name: 'Node.js',\r\n//           id: 2,\r\n//           parts: [\r\n//             {\r\n//               name: 'Routing',\r\n//               exercises: 3,\r\n//               id: 1\r\n//             },\r\n//             {\r\n//               name: 'Middlewares',\r\n//               exercises: 7,\r\n//               id: 2\r\n//             }\r\n//           ]\r\n//         }\r\n//       ]\r\n    \r\n  \r\n//     return (\r\n//       <div>\r\n//         {courses.map(course => <Course key={course.id} course={course} />)}\r\n//       </div>\r\n//     )\r\n//   }\r\n\r\n// ReactDOM.render(\r\n//     <App/>,\r\n//     document.getElementById('root')\r\n//   )\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport Note from './components/Note'\r\nimport App from './App'\r\nimport './index.css'\r\nimport axios from 'axios'\r\nimport Notification from './components/Notification'\r\n\r\n// axios\r\n//   .get('http://localhost:3001/notes')\r\n//   .then(response => {\r\n//     const notes = response.data\r\n//     ReactDOM.render(\r\n//       <App notes={notes} />,\r\n//       document.getElementById('root')\r\n//     )\r\n// })\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n)\r\n\r\n// const promise2 = axios.get('http://localhost:3001/foobar')\r\n// console.log(promise2)\r\n\r\n\r\n// const notes = [\r\n//   {\r\n//     id: 1,\r\n//     content: 'HTML is easy',\r\n//     date: '2019-05-30T17:30:31.098Z',\r\n//     important: true\r\n//   },\r\n//   {\r\n//     id: 2,\r\n//     content: 'Browser can execute only Javascript',\r\n//     date: '2019-05-30T18:39:34.091Z',\r\n//     important: false\r\n//   },\r\n//   {\r\n//     id: 3,\r\n//     content: 'GET and POST are the most important methods of HTTP protocol',\r\n//     date: '2019-05-30T19:20:14.298Z',\r\n//     important: true\r\n//   }\r\n// ]\r\n\r\n"],"sourceRoot":""}
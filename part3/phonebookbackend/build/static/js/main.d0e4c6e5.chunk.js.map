{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","delete","put","Notification","message","className","filterArrays","arr","searchValue","filter","person","name","toLowerCase","includes","Person","deleteButton","number","onClick","Filter","props","value","search","onChange","PersonForm","onSubmit","valueName","onChangeName","valueNumber","onChangeNumber","type","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","setNewSearch","errorMessage","setErrorMessage","useEffect","personService","then","response","data","catch","error","findPersonID","find","event","target","preventDefault","personAdd","map","Map","i","length","set","has","isDuplicate","window","confirm","updatedPerson","setTimeout","concat","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d0e4c6e5.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = \"/api/persons\"\r\n\r\nconst getAll = () => {\r\n    return axios.get(baseUrl)\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nconst updateNumber = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nexport default {\r\n    getAll: getAll,\r\n    create: create,\r\n    deletePerson: deletePerson,\r\n    updateNumber: updateNumber\r\n}","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport personService from './services/persons'\r\nimport './index.css'\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className=\"error\">\r\n      {message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst isDuplicate = (persons, newName) => {\r\n  const map = new Map();\r\n  for(var i = 0; i < persons.length; i++){ \r\n    map.set(persons[i].name, 1)\r\n  }\r\n  if(map.has(newName)){\r\n    return true\r\n  } else {\r\n    return false\r\n  }\r\n}\r\n\r\nfunction filterArrays(arr,searchValue){\r\n  const showFilter = (!isFiltered(searchValue))\r\n  ? arr\r\n  : arr.filter(person => person.name.toLowerCase().includes(searchValue.toLowerCase()))\r\n \r\n  return showFilter\r\n}\r\n\r\n//full list of persons\r\nconst Persons = (props) => {\r\n  var showFilter = filterArrays(props.persons, props.search)\r\n  // if(!isFiltered(props.search)){\r\n    return showFilter.map(person => <p key={person.name}>{person.name} {person.number}</p>)\r\n  // } else {\r\n    // return showFilter.map(person => <p key={person.name}>{person.name} {person.number}</p>)\r\n  // }\r\n}\r\n\r\n//modularized single person\r\nconst Person = ({person, deleteButton}) => {\r\n  return (\r\n    <div>\r\n      {person.name} {person.number}\r\n      <button onClick={deleteButton}>delete</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <form >\r\n        <div>\r\n          filter shown with <input value={props.search} onChange={props.onChange}/>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nfunction isFiltered(a) {\r\n  if(a === ''){\r\n    return false\r\n  } else {\r\n    return true\r\n  }\r\n}\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <div>\r\n        name: <input value={props.valueName} onChange={props.onChangeName}/>\r\n      </div>\r\n      <div>\r\n        number: <input value={props.valueNumber} onChange={props.onChangeNumber}/>\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([])\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ search, setNewSearch ] = useState('')\r\n  // const [error, setError] = useState(\"error\")\r\n  const [errorMessage, setErrorMessage] = useState(\"Error...\")\r\n\r\n  useEffect(() => {\r\n    // console.log('effect')\r\n    // axios\r\n    //   .get('http://localhost:3001/persons')\r\n    //   .then(response => {\r\n    //     console.log('promise fulfilled')\r\n    //     setError(null)\r\n    //     setPersons(response.data)\r\n    //   })\r\n    personService\r\n      .getAll()\r\n      .then(response => {\r\n        // setError(null)\r\n        setErrorMessage(null)\r\n        setPersons(response.data)\r\n      })\r\n      .catch(error => {\r\n        // setError(error.response.data.message)\r\n        setErrorMessage(`can't get list of persons`)\r\n        setPersons([])\r\n      })\r\n  }, [])\r\n  // console.log('render', persons.length, 'persons')\r\n  \r\n  const findPersonID = (persons, newName) => {\r\n    return persons.find(person => person.name === newName).id\r\n  }\r\n\r\n  const addNameNumber = (event) => {\r\n      event.preventDefault()\r\n      const personAdd = {\r\n        name: newName,\r\n        number: newNumber\r\n      }      \r\n\r\n      if(isDuplicate(persons, newName)){\r\n        // alert(`${newName} is already added to phonebook`)\r\n        if(window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)){\r\n          const id = findPersonID(persons, newName)\r\n          personService\r\n            .updateNumber(id, personAdd)\r\n            .then(updatedPerson => {\r\n              // setError(null)\r\n              setErrorMessage(null)\r\n              const id = findPersonID(persons, newName)\r\n              setPersons(persons.map(person => person.id !== id ? person : updatedPerson.data))\r\n              setNewName('')\r\n              setNewNumber('')\r\n            })\r\n            .catch(error => {\r\n              // setError(error.response.data.message)\r\n              setErrorMessage(\r\n                `Information of ${newName} has already been removed from server`\r\n              )\r\n              setTimeout(() => {\r\n                setErrorMessage(null)\r\n              }, 5000)\r\n              setPersons(persons)\r\n              setNewName('')\r\n              setNewNumber('')\r\n            })\r\n        }\r\n      } else {\r\n        // axios\r\n        //   .post('http://localhost:3001/persons', personAdd)\r\n        //   .then(response => {\r\n        //     setError(null)\r\n        //     setPersons(persons.concat(personAdd))\r\n        //     setNewName('')\r\n        //     setNewNumber('')\r\n        //   })\r\n        //   .catch(error => {\r\n        //     setError(error.response.data.message)\r\n        //     //if cannot add object set persons doesnt change\r\n        //     setPersons(persons)\r\n        //     setNewName('')\r\n        //     setNewNumber('')\r\n        //   })\r\n\r\n        personService\r\n          .create(personAdd)\r\n          .then(response => {\r\n            // setError(null)\r\n            setErrorMessage(null)\r\n            setPersons(persons.concat(response.data))\r\n            setNewName('')\r\n            setNewNumber('')\r\n            setErrorMessage(\r\n              `Added ${personAdd.name}`\r\n            )\r\n            setTimeout(() => {\r\n              setErrorMessage(null)\r\n            }, 5000)\r\n          })\r\n          .catch(error => {\r\n            // setError(error.response.data.message)\r\n            setErrorMessage('Error adding person')\r\n            //if cannot add object set persons doesnt change\r\n            setPersons(persons)\r\n            setNewName('')\r\n            setNewNumber('')\r\n          })\r\n      }\r\n  }\r\n\r\n  const deleteButton = (id, name) => {\r\n    \r\n    if(window.confirm(`Delete ${name} ?`)){\r\n      personService\r\n      .deletePerson(id)\r\n      .then(response => {\r\n        // setError(null)\r\n        setErrorMessage(null)\r\n        setPersons(persons.filter(person => person.id !== id))\r\n      })\r\n      .catch(error => {\r\n        // setError(error.response.data.message)\r\n        setErrorMessage('Unable to delete person')\r\n        setPersons(persons.filter(person => person.id !== id))\r\n      })\r\n    }\r\n    \r\n  }  \r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleSearchChange = (event) => {\r\n    //take whats in the input box and set state search to it\r\n    setNewSearch(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={errorMessage} />\r\n      <Filter value={search} onChange={handleSearchChange} />\r\n      <h3>add a new</h3>\r\n      <PersonForm valueName={newName} onChangeName={handleNameChange} \r\n                  valueNumber={newNumber} onChangeNumber={handleNumberChange}\r\n                  onSubmit={addNameNumber}/>\r\n      <h3>Numbers</h3>\r\n      {/* <Persons search={search} persons={persons}/> */}\r\n      {/* {console.log('filter',!isFiltered(search) )} */}\r\n       {/* { !isFiltered(search) \r\n          ? (persons.map(person => (\r\n            <Person key={person.name} person={person} deleteButton={() => deleteButton(person.id, person.name)}/>\r\n          )))\r\n          : (persons.map(person => (\r\n            <Person key={person.name} person={person} deleteButton={() => deleteButton(person.id, person.name)}/>\r\n          )))\r\n        } */}\r\n        {filterArrays(persons, search).map(person => (\r\n          <Person key={person.name} person={person} deleteButton={() => deleteButton(person.id, person.name)}/>\r\n        ))}\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById('root')\r\n  )"],"sourceRoot":""}